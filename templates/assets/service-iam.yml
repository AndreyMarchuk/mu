---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU IAM roles for a service
Parameters:
  Namespace:
    Type: String
    Description: Namespace for stack prefixes
  EnvironmentName:
    Type: String
    Description: Name of environment used for resource namespace
  ServiceName:
    Type: String
    Description: Name of service used for resource namespace
  Provider:
    Type: String
    Description: Provider type for services
    Default: "ecs"
    AllowedValues:
      - "ecs"
      - "ecs-fargate"
      - "ec2"
  CodeDeployBucket:
    Type: String
    Description: Name of bucket to use for the CodeDeployBucket artifacts
Conditions:
  IsEc2Service:
    "Fn::Equals":
      - !Ref Provider
      - 'ec2'
  IsEcsService:
    "Fn::Or":
      - "Fn::Equals":
        - !Ref Provider
        - 'ecs'
      - "Fn::Equals":
        - !Ref Provider
        - 'ecs-fargate'
Resources:
  DatabaseKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub Service key for ${Namespace}-service-${ServiceName}-${EnvironmentName}
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
              - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/${Namespace}-cloudformation-common-${AWS::Region}
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
              - kms:DescribeKey
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Encrypt
              - kms:ReEncrypt
              - kms:Decrypt
            Resource: '*'
          - Effect: "Allow"
            Principal:
              AWS: '*'
            Action:
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Encrypt
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:Decrypt
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub "ssm.${AWS::Region}.amazonaws.com"
                'kms:CallerAccount': !Sub ${AWS::AccountId}
          - Effect: "Allow"
            Principal:
              AWS:
              - Fn::If:
                - IsEc2Service
                - !GetAtt EC2Role.Arn
                - !Ref AWS::NoValue
              - Fn::If:
                - IsEcsService
                - !GetAtt EcsTaskRole.Arn
                - !Ref AWS::NoValue
            Action:
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Encrypt
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:Decrypt
            Resource: '*'
          - Effect: "Deny"
            Principal: '*'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: false
  DatabaseKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Namespace}-service-${ServiceName}-${EnvironmentName}
      TargetKeyId: !Ref DatabaseKey
  CodeDeployRole:
    Type: AWS::IAM::Role
    Condition: IsEc2Service
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-codedeploy-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - !Sub codedeploy.${AWS::Region}.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsEc2Service
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Condition: IsEc2Service
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-instance-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Policies:
      - PolicyName: service-access
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - s3:GetBucketAcl
            - s3:GetBucketLocation
            - s3:GetBucketPolicy
            - s3:GetBucketTagging
            - s3:GetBucketVersioning
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:GetObjectVersion
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:ListBucketVersions
            - s3:ListMultipartUploadParts
            Resource:
            - Fn::Sub: arn:aws:s3:::${CodeDeployBucket}
            - Fn::Sub: arn:aws:s3:::${CodeDeployBucket}/*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - cloudformation:GetTemplate
            Resource:
            - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-service-${ServiceName}-${EnvironmentName}
            - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-service-${ServiceName}-${EnvironmentName}/*
          - Action:
            - cloudformation:DescribeStacks
            Resource: '*'
            Effect: Allow
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - logs:DescribeLogGroups
            Resource: '*'

  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Condition: IsEcsService
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-autoscaling-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
       - PolicyName: autoscale-ecs-service
         PolicyDocument:
           Statement:
           - Effect: Allow
             Action:
             - ecs:UpdateService
             - ecs:DescribeServices
             - cloudwatch:DescribeAlarms
             - cloudwatch:GetMetricStatistics
             - cloudwatch:PutMetricAlarm
             Resource: "*"
  EcsEventsRole:
    Type: AWS::IAM::Role
    Condition: IsEcsService
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-events-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-task
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:RunTask
            Resource: "*"
            Condition:
              ArnEquals:
                "ecs:cluster": !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Namespace}-environment-${EnvironmentName}

  EcsServiceRole:
    Type: AWS::IAM::Role
    Condition: IsEcsService
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-service-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsTaskRole:
    Type: AWS::IAM::Role
    Condition: IsEcsService
    Properties:
      RoleName: !Sub ${Namespace}-service-${ServiceName}-${EnvironmentName}-task-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-task
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:DescribeTasks
            Resource: "*"
            Condition:
              ArnEquals:
                "ecs:cluster": !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Namespace}-environment-${EnvironmentName}
      - PolicyName: task-execution
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            Resource: '*'

Outputs:
  DatabaseKeyArn:
    Description: KMS key for RDS Databases
    Value: !GetAtt DatabaseKey.Arn
  EC2InstanceProfileArn:
    Description: Instance profile for EC2 instances
    Value:
      Fn::If:
      - IsEc2Service
      - !GetAtt EC2InstanceProfile.Arn
      - ''
  CodeDeployRoleArn:
    Description: Role assummed by CodeDeploy
    Value:
      Fn::If:
      - IsEc2Service
      - !GetAtt CodeDeployRole.Arn
      - ''
  EcsEventsRoleArn:
    Description: Role assummed by CloudWatch events
    Value:
      Fn::If:
      - IsEcsService
      - !GetAtt EcsEventsRole.Arn
      - ''
  EcsServiceRoleArn:
    Description: Role assummed by ECS Service
    Value:
      Fn::If:
      - IsEcsService
      - !GetAtt EcsServiceRole.Arn
      - ''
  EcsTaskRoleArn:
    Description: Role assummed by ECS Task
    Value:
      Fn::If:
      - IsEcsService
      - !GetAtt EcsTaskRole.Arn
      - ''
  ApplicationAutoScalingRoleArn:
    Description: Role assummed by application autoscaling
    Value:
      Fn::If:
      - IsEcsService
      - !GetAtt ApplicationAutoScalingRole.Arn
      - ''
