---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU service in a specific environment containing an ALB target group with ECS service and task definition
Parameters:
  EcsServiceRoleArn:
    Type: String
    Description: ARN of IAM role for ECS service to assume
  EcsTaskRoleArn:
    Type: String
    Description: ARN of IAM role for ECS task to assume
  ApplicationAutoScalingRoleArn:
    Type: String
    Description: ARN of IAM role for ECS autoscaling
  ServiceName:
    Type: String
    Description: Name of service
  ImageUrl:
    Type: String
    Description: Docker Image URL
  ServicePort:
    Type: String
    Description: Port exposed in service
    Default: '8080'
  ServiceProtocol:
    Type: String
    Description: Protocol for port exposed in service
    Default: 'HTTP'
    AllowedValues:
    - HTTP
    - HTTPS
  ServiceHealthEndpoint:
    Type: String
    Description: Endpoint to test service health
    Default: '/health'
  ServiceCpu:
    Type: String
    Description: CPU units to reserve for container
    Default: '10'
  ServiceMemory:
    Type: String
    Description: Memory to allocate to contianer (in MiB)
    Default: '300'
  ServiceDesiredCount:
    Type: Number
    Default: '2'
    Description: Number of containers to launch in your ECS service.
  ServiceMinSize:
    Type: Number
    Default: '1'
    Description: Minimum number of instances that can be launched
  ServiceMaxSize:
    Type: Number
    Default: '2'
    Description: Maximum number of instances that can be launched
  PathPattern:
    Type: CommaDelimitedList
    Description: List of paths to route to the service.
    Default: ''
  PathListenerRulePriority:
    Type: Number
    Description: The priority of the path rule being added to the listener
    Default: 1
  HostPattern:
    Type: CommaDelimitedList
    Description: List of hosts to route to the service.
    Default: ''
  HostListenerRulePriority:
    Type: Number
    Description: The priority of the host rule being added to the listener
    Default: 2
  VpcId:
    Type: String
    Description: Name of the value to import for the VpcId
  EcsCluster:
    Type: String
    Description: Name of the value to import for Ecs Cluster to deploy to.
  ElbHttpListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
  ElbHttpsListenerArn:
    Type: String
    Description: Name of the value to import for the Arn of the ELB listener to attach the target group to.
    Default: ''
  DatabaseName:
    Type: String
    Description: Name of database
    Default: ""
  DatabaseMasterUsername:
    Type: String
    Description: Username of database
    Default: ""
  DatabaseMasterPassword:
    Type: String
    NoEcho: true
    Description: Password of database
    Default: ""
  DatabaseEndpointAddress:
    Type: String
    Description: Endpoint address of database
    Default: ""
  DatabaseEndpointPort:
    Type: String
    Description: Endpoint port of database
    Default: ""
  TargetCPUUtilization:
    Type: String
    Description: Target CPU Utilization for Tracking Policy on ASG
    Default: '75'
  TaskCpu:
    Type: Number
    Description: CPU for Fargate services
    Default: 256
  TaskMemory:
    Type: Number
    Description: Memory for Fargate services
    Default: 512
  TaskNetworkMode:
    Type: String
    Default: bridge
    AllowedValues:
      - awsvpc
      - none
      - host
      - bridge
    Description: Network mode for tasks
  LaunchType:
    Type: String
    Description: Name of value to import for service launch type
  ServiceSubnetIds:
    Type: String
    Description: Name of the value to import for the ecs subnet ids
  ServiceSecurityGroup:
    Type: String
    Description: Name of the value to import for the security group id
  ElbSecurityGroup:
    Type: String
    Description: Name of the value to import for the ELB group id
Conditions:
  HasPathPattern:
    "Fn::Not":
      - "Fn::Equals":
        - "Fn::Join":
          - ''
          - !Ref PathPattern
        - ''
  HasHostPattern:
    "Fn::Not":
      - "Fn::Equals":
        - "Fn::Join":
          - ''
          - !Ref HostPattern
        - ''
  HasTargetGroup:
    "Fn::Or":
    - !Condition HasPathPattern
    - !Condition HasHostPattern
  HasElbHttpPathListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpListenerArn}
         - ''
    - !Condition HasPathPattern
  HasElbHttpsPathListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpsListenerArn}
         - ''
    - !Condition HasPathPattern
  HasElbHttpHostListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpListenerArn}
         - ''
    - !Condition HasHostPattern
  HasElbHttpsHostListener:
    "Fn::And":
    - "Fn::Not":
       - "Fn::Equals":
         - !Sub ${ElbHttpsListenerArn}
         - ''
    - !Condition HasHostPattern
  HasAwsVpcNetworkMode:
    "Fn::Equals":
      - !Sub ${TaskNetworkMode}
      - 'awsvpc'
Resources:
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
    - ServiceLogGroup
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${EcsCluster}
      DesiredCount: !Ref ServiceDesiredCount
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LaunchType:
        Fn::ImportValue: !Sub ${LaunchType}
      NetworkConfiguration:
        Fn::If:
          - HasAwsVpcNetworkMode
          - AwsvpcConfiguration:
              SecurityGroups:
                - Fn::ImportValue: !Sub ${ElbSecurityGroup}
                - Fn::ImportValue: !Sub ${ServiceSecurityGroup}
              Subnets:
                Fn::Split:
                - ","
                - Fn::ImportValue: !Sub ${ServiceSubnetIds}
          - !Ref AWS::NoValue
      LoadBalancers:
        - Fn::If:
          - HasTargetGroup
          - ContainerName: !Ref ServiceName
            ContainerPort: !Ref ServicePort
            TargetGroupArn: !Ref ElbTargetGroup
          - !Ref AWS::NoValue
      Role:
        Fn::If:
          - HasTargetGroup
          - Fn::If:
             - HasAwsVpcNetworkMode
             - !Ref AWS::NoValue
             - !Ref EcsServiceRoleArn
          - !Ref AWS::NoValue
      TaskDefinition: !Ref MicroserviceTaskDefinition
  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Ref AWS::StackName
  MicroserviceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
      - Fn::ImportValue: !Sub ${LaunchType}
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: !Ref TaskNetworkMode
      ContainerDefinitions:
      - Name: !Ref ServiceName
        Cpu: !Ref ServiceCpu
        Essential: 'true'
        Image: !Ref ImageUrl
        Memory: !Ref ServiceMemory
        Environment:
        {{with .Environment}}
          {{range $key, $val := .}}
          - Name: {{$key}}
            Value: !Sub {{$val}}
          {{end}}
        {{end}}
          - Name: _PRIMARY_ELB_LISTENER
            Value:
              Fn::If:
              - HasElbHttpPathListener
              - !Ref ElbHttpPathListenerRule
              - Fn::If:
                - HasElbHttpsPathListener
                - !Ref ElbHttpsPathListenerRule
                - Fn::If:
                  - HasElbHttpHostListener
                  - !Ref ElbHttpHostListenerRule
                  - Fn::If:
                    - HasElbHttpsHostListener
                    - !Ref ElbHttpsHostListenerRule
                    - ''
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref AWS::StackName
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: container
        PortMappings:
        - HostPort:
            Fn::If:
              - HasAwsVpcNetworkMode
              - !Ref AWS::NoValue
              - 0
          ContainerPort: !Ref ServicePort
      Volumes: []
      ExecutionRoleArn: !Ref EcsTaskRoleArn
      TaskRoleArn: !Ref EcsTaskRoleArn
  ElbHttpPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpPathListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpListenerArn}
      Priority: !Ref PathListenerRulePriority
  ElbHttpsPathListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpsPathListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: path-pattern
        Values: !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpsListenerArn}
      Priority: !Ref PathListenerRulePriority
  ElbHttpHostListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpHostListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: host-header
        Values: !Ref HostPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpListenerArn}
      Priority: !Ref HostListenerRulePriority
  ElbHttpsHostListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HasElbHttpsHostListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ElbTargetGroup
      Conditions:
      - Field: host-header
        Values: !Ref HostPattern
      ListenerArn:
        Fn::ImportValue: !Sub ${ElbHttpsListenerArn}
      Priority: !Ref HostListenerRulePriority
  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: HasTargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref ServiceHealthEndpoint
      HealthCheckProtocol: !Ref ServiceProtocol
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: !Ref ServicePort
      Protocol: !Ref ServiceProtocol
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      TargetType:
        Fn::If:
          - HasAwsVpcNetworkMode
          - ip
          - instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${VpcId}
  CPUUtilizationPolicyTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ServiceMaxSize
      MinCapacity: !Ref ServiceMinSize
      ResourceId:
        Fn::Sub:
          - service/${EcsClusterName}/${EcsService.Name}
          - EcsClusterName:
              Fn::ImportValue: !Ref EcsCluster
      RoleARN: !Ref ApplicationAutoScalingRoleArn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  CPUUtilizationPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyType: TargetTrackingScaling
      PolicyName: !Sub ${AWS::StackName}-cpu-utilization
      ScalingTargetId: !Ref CPUUtilizationPolicyTarget
      TargetTrackingScalingPolicyConfiguration:
        CustomizedMetricSpecification:
          Dimensions: 
            - Name: ServiceName
              Value: !Sub ${EcsService.Name}
          MetricName: CPUUtilization
          Namespace: AWS/ECS
          Statistic: Average
        TargetValue: !Ref TargetCPUUtilization
Outputs:
  MicroserviceTaskDefinitionArn:
    Description: Microservice TaskDefinition
    Value: !Ref MicroserviceTaskDefinition
  EcsCluster:
    Description: Roadmap Cluster
    Value:
      Fn::ImportValue: !Ref EcsCluster
